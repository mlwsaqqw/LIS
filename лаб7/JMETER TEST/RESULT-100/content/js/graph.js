/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 248.0, "minX": 0.0, "maxY": 5768.0, "series": [{"data": [[0.0, 610.0], [0.1, 610.0], [0.2, 610.0], [0.3, 610.0], [0.4, 610.0], [0.5, 610.0], [0.6, 610.0], [0.7, 610.0], [0.8, 610.0], [0.9, 610.0], [1.0, 612.0], [1.1, 612.0], [1.2, 612.0], [1.3, 612.0], [1.4, 612.0], [1.5, 612.0], [1.6, 612.0], [1.7, 612.0], [1.8, 612.0], [1.9, 612.0], [2.0, 616.0], [2.1, 616.0], [2.2, 616.0], [2.3, 616.0], [2.4, 616.0], [2.5, 616.0], [2.6, 616.0], [2.7, 616.0], [2.8, 616.0], [2.9, 616.0], [3.0, 616.0], [3.1, 616.0], [3.2, 616.0], [3.3, 616.0], [3.4, 616.0], [3.5, 616.0], [3.6, 616.0], [3.7, 616.0], [3.8, 616.0], [3.9, 616.0], [4.0, 621.0], [4.1, 621.0], [4.2, 621.0], [4.3, 621.0], [4.4, 621.0], [4.5, 621.0], [4.6, 621.0], [4.7, 621.0], [4.8, 621.0], [4.9, 621.0], [5.0, 622.0], [5.1, 622.0], [5.2, 622.0], [5.3, 622.0], [5.4, 622.0], [5.5, 622.0], [5.6, 622.0], [5.7, 622.0], [5.8, 622.0], [5.9, 622.0], [6.0, 623.0], [6.1, 623.0], [6.2, 623.0], [6.3, 623.0], [6.4, 623.0], [6.5, 623.0], [6.6, 623.0], [6.7, 623.0], [6.8, 623.0], [6.9, 623.0], [7.0, 626.0], [7.1, 626.0], [7.2, 626.0], [7.3, 626.0], [7.4, 626.0], [7.5, 626.0], [7.6, 626.0], [7.7, 626.0], [7.8, 626.0], [7.9, 626.0], [8.0, 626.0], [8.1, 626.0], [8.2, 626.0], [8.3, 626.0], [8.4, 626.0], [8.5, 626.0], [8.6, 626.0], [8.7, 626.0], [8.8, 626.0], [8.9, 626.0], [9.0, 630.0], [9.1, 630.0], [9.2, 630.0], [9.3, 630.0], [9.4, 630.0], [9.5, 630.0], [9.6, 630.0], [9.7, 630.0], [9.8, 630.0], [9.9, 630.0], [10.0, 630.0], [10.1, 630.0], [10.2, 630.0], [10.3, 630.0], [10.4, 630.0], [10.5, 630.0], [10.6, 630.0], [10.7, 630.0], [10.8, 630.0], [10.9, 630.0], [11.0, 630.0], [11.1, 630.0], [11.2, 630.0], [11.3, 630.0], [11.4, 630.0], [11.5, 630.0], [11.6, 630.0], [11.7, 630.0], [11.8, 630.0], [11.9, 630.0], [12.0, 632.0], [12.1, 632.0], [12.2, 632.0], [12.3, 632.0], [12.4, 632.0], [12.5, 632.0], [12.6, 632.0], [12.7, 632.0], [12.8, 632.0], [12.9, 632.0], [13.0, 635.0], [13.1, 635.0], [13.2, 635.0], [13.3, 635.0], [13.4, 635.0], [13.5, 635.0], [13.6, 635.0], [13.7, 635.0], [13.8, 635.0], [13.9, 635.0], [14.0, 636.0], [14.1, 636.0], [14.2, 636.0], [14.3, 636.0], [14.4, 636.0], [14.5, 636.0], [14.6, 636.0], [14.7, 636.0], [14.8, 636.0], [14.9, 636.0], [15.0, 637.0], [15.1, 637.0], [15.2, 637.0], [15.3, 637.0], [15.4, 637.0], [15.5, 637.0], [15.6, 637.0], [15.7, 637.0], [15.8, 637.0], [15.9, 637.0], [16.0, 638.0], [16.1, 638.0], [16.2, 638.0], [16.3, 638.0], [16.4, 638.0], [16.5, 638.0], [16.6, 638.0], [16.7, 638.0], [16.8, 638.0], [16.9, 638.0], [17.0, 639.0], [17.1, 639.0], [17.2, 639.0], [17.3, 639.0], [17.4, 639.0], [17.5, 639.0], [17.6, 639.0], [17.7, 639.0], [17.8, 639.0], [17.9, 639.0], [18.0, 640.0], [18.1, 640.0], [18.2, 640.0], [18.3, 640.0], [18.4, 640.0], [18.5, 640.0], [18.6, 640.0], [18.7, 640.0], [18.8, 640.0], [18.9, 640.0], [19.0, 643.0], [19.1, 643.0], [19.2, 643.0], [19.3, 643.0], [19.4, 643.0], [19.5, 643.0], [19.6, 643.0], [19.7, 643.0], [19.8, 643.0], [19.9, 643.0], [20.0, 652.0], [20.1, 652.0], [20.2, 652.0], [20.3, 652.0], [20.4, 652.0], [20.5, 652.0], [20.6, 652.0], [20.7, 652.0], [20.8, 652.0], [20.9, 652.0], [21.0, 652.0], [21.1, 652.0], [21.2, 652.0], [21.3, 652.0], [21.4, 652.0], [21.5, 652.0], [21.6, 652.0], [21.7, 652.0], [21.8, 652.0], [21.9, 652.0], [22.0, 653.0], [22.1, 653.0], [22.2, 653.0], [22.3, 653.0], [22.4, 653.0], [22.5, 653.0], [22.6, 653.0], [22.7, 653.0], [22.8, 653.0], [22.9, 653.0], [23.0, 654.0], [23.1, 654.0], [23.2, 654.0], [23.3, 654.0], [23.4, 654.0], [23.5, 654.0], [23.6, 654.0], [23.7, 654.0], [23.8, 654.0], [23.9, 654.0], [24.0, 657.0], [24.1, 657.0], [24.2, 657.0], [24.3, 657.0], [24.4, 657.0], [24.5, 657.0], [24.6, 657.0], [24.7, 657.0], [24.8, 657.0], [24.9, 657.0], [25.0, 660.0], [25.1, 660.0], [25.2, 660.0], [25.3, 660.0], [25.4, 660.0], [25.5, 660.0], [25.6, 660.0], [25.7, 660.0], [25.8, 660.0], [25.9, 660.0], [26.0, 662.0], [26.1, 662.0], [26.2, 662.0], [26.3, 662.0], [26.4, 662.0], [26.5, 662.0], [26.6, 662.0], [26.7, 662.0], [26.8, 662.0], [26.9, 662.0], [27.0, 664.0], [27.1, 664.0], [27.2, 664.0], [27.3, 664.0], [27.4, 664.0], [27.5, 664.0], [27.6, 664.0], [27.7, 664.0], [27.8, 664.0], [27.9, 664.0], [28.0, 666.0], [28.1, 666.0], [28.2, 666.0], [28.3, 666.0], [28.4, 666.0], [28.5, 666.0], [28.6, 666.0], [28.7, 666.0], [28.8, 666.0], [28.9, 666.0], [29.0, 670.0], [29.1, 670.0], [29.2, 670.0], [29.3, 670.0], [29.4, 670.0], [29.5, 670.0], [29.6, 670.0], [29.7, 670.0], [29.8, 670.0], [29.9, 670.0], [30.0, 673.0], [30.1, 673.0], [30.2, 673.0], [30.3, 673.0], [30.4, 673.0], [30.5, 673.0], [30.6, 673.0], [30.7, 673.0], [30.8, 673.0], [30.9, 673.0], [31.0, 677.0], [31.1, 677.0], [31.2, 677.0], [31.3, 677.0], [31.4, 677.0], [31.5, 677.0], [31.6, 677.0], [31.7, 677.0], [31.8, 677.0], [31.9, 677.0], [32.0, 679.0], [32.1, 679.0], [32.2, 679.0], [32.3, 679.0], [32.4, 679.0], [32.5, 679.0], [32.6, 679.0], [32.7, 679.0], [32.8, 679.0], [32.9, 679.0], [33.0, 679.0], [33.1, 679.0], [33.2, 679.0], [33.3, 679.0], [33.4, 679.0], [33.5, 679.0], [33.6, 679.0], [33.7, 679.0], [33.8, 679.0], [33.9, 679.0], [34.0, 685.0], [34.1, 685.0], [34.2, 685.0], [34.3, 685.0], [34.4, 685.0], [34.5, 685.0], [34.6, 685.0], [34.7, 685.0], [34.8, 685.0], [34.9, 685.0], [35.0, 685.0], [35.1, 685.0], [35.2, 685.0], [35.3, 685.0], [35.4, 685.0], [35.5, 685.0], [35.6, 685.0], [35.7, 685.0], [35.8, 685.0], [35.9, 685.0], [36.0, 685.0], [36.1, 685.0], [36.2, 685.0], [36.3, 685.0], [36.4, 685.0], [36.5, 685.0], [36.6, 685.0], [36.7, 685.0], [36.8, 685.0], [36.9, 685.0], [37.0, 686.0], [37.1, 686.0], [37.2, 686.0], [37.3, 686.0], [37.4, 686.0], [37.5, 686.0], [37.6, 686.0], [37.7, 686.0], [37.8, 686.0], [37.9, 686.0], [38.0, 694.0], [38.1, 694.0], [38.2, 694.0], [38.3, 694.0], [38.4, 694.0], [38.5, 694.0], [38.6, 694.0], [38.7, 694.0], [38.8, 694.0], [38.9, 694.0], [39.0, 702.0], [39.1, 702.0], [39.2, 702.0], [39.3, 702.0], [39.4, 702.0], [39.5, 702.0], [39.6, 702.0], [39.7, 702.0], [39.8, 702.0], [39.9, 702.0], [40.0, 702.0], [40.1, 702.0], [40.2, 702.0], [40.3, 702.0], [40.4, 702.0], [40.5, 702.0], [40.6, 702.0], [40.7, 702.0], [40.8, 702.0], [40.9, 702.0], [41.0, 704.0], [41.1, 704.0], [41.2, 704.0], [41.3, 704.0], [41.4, 704.0], [41.5, 704.0], [41.6, 704.0], [41.7, 704.0], [41.8, 704.0], [41.9, 704.0], [42.0, 705.0], [42.1, 705.0], [42.2, 705.0], [42.3, 705.0], [42.4, 705.0], [42.5, 705.0], [42.6, 705.0], [42.7, 705.0], [42.8, 705.0], [42.9, 705.0], [43.0, 706.0], [43.1, 706.0], [43.2, 706.0], [43.3, 706.0], [43.4, 706.0], [43.5, 706.0], [43.6, 706.0], [43.7, 706.0], [43.8, 706.0], [43.9, 706.0], [44.0, 706.0], [44.1, 706.0], [44.2, 706.0], [44.3, 706.0], [44.4, 706.0], [44.5, 706.0], [44.6, 706.0], [44.7, 706.0], [44.8, 706.0], [44.9, 706.0], [45.0, 706.0], [45.1, 706.0], [45.2, 706.0], [45.3, 706.0], [45.4, 706.0], [45.5, 706.0], [45.6, 706.0], [45.7, 706.0], [45.8, 706.0], [45.9, 706.0], [46.0, 706.0], [46.1, 706.0], [46.2, 706.0], [46.3, 706.0], [46.4, 706.0], [46.5, 706.0], [46.6, 706.0], [46.7, 706.0], [46.8, 706.0], [46.9, 706.0], [47.0, 708.0], [47.1, 708.0], [47.2, 708.0], [47.3, 708.0], [47.4, 708.0], [47.5, 708.0], [47.6, 708.0], [47.7, 708.0], [47.8, 708.0], [47.9, 708.0], [48.0, 712.0], [48.1, 712.0], [48.2, 712.0], [48.3, 712.0], [48.4, 712.0], [48.5, 712.0], [48.6, 712.0], [48.7, 712.0], [48.8, 712.0], [48.9, 712.0], [49.0, 713.0], [49.1, 713.0], [49.2, 713.0], [49.3, 713.0], [49.4, 713.0], [49.5, 713.0], [49.6, 713.0], [49.7, 713.0], [49.8, 713.0], [49.9, 713.0], [50.0, 1637.0], [50.1, 1637.0], [50.2, 1637.0], [50.3, 1637.0], [50.4, 1637.0], [50.5, 1637.0], [50.6, 1637.0], [50.7, 1637.0], [50.8, 1637.0], [50.9, 1637.0], [51.0, 1731.0], [51.1, 1731.0], [51.2, 1731.0], [51.3, 1731.0], [51.4, 1731.0], [51.5, 1731.0], [51.6, 1731.0], [51.7, 1731.0], [51.8, 1731.0], [51.9, 1731.0], [52.0, 1736.0], [52.1, 1736.0], [52.2, 1736.0], [52.3, 1736.0], [52.4, 1736.0], [52.5, 1736.0], [52.6, 1736.0], [52.7, 1736.0], [52.8, 1736.0], [52.9, 1736.0], [53.0, 1768.0], [53.1, 1768.0], [53.2, 1768.0], [53.3, 1768.0], [53.4, 1768.0], [53.5, 1768.0], [53.6, 1768.0], [53.7, 1768.0], [53.8, 1768.0], [53.9, 1768.0], [54.0, 1772.0], [54.1, 1772.0], [54.2, 1772.0], [54.3, 1772.0], [54.4, 1772.0], [54.5, 1772.0], [54.6, 1772.0], [54.7, 1772.0], [54.8, 1772.0], [54.9, 1772.0], [55.0, 1778.0], [55.1, 1778.0], [55.2, 1778.0], [55.3, 1778.0], [55.4, 1778.0], [55.5, 1778.0], [55.6, 1778.0], [55.7, 1778.0], [55.8, 1778.0], [55.9, 1778.0], [56.0, 1838.0], [56.1, 1838.0], [56.2, 1838.0], [56.3, 1838.0], [56.4, 1838.0], [56.5, 1838.0], [56.6, 1838.0], [56.7, 1838.0], [56.8, 1838.0], [56.9, 1838.0], [57.0, 1881.0], [57.1, 1881.0], [57.2, 1881.0], [57.3, 1881.0], [57.4, 1881.0], [57.5, 1881.0], [57.6, 1881.0], [57.7, 1881.0], [57.8, 1881.0], [57.9, 1881.0], [58.0, 1898.0], [58.1, 1898.0], [58.2, 1898.0], [58.3, 1898.0], [58.4, 1898.0], [58.5, 1898.0], [58.6, 1898.0], [58.7, 1898.0], [58.8, 1898.0], [58.9, 1898.0], [59.0, 1911.0], [59.1, 1911.0], [59.2, 1911.0], [59.3, 1911.0], [59.4, 1911.0], [59.5, 1911.0], [59.6, 1911.0], [59.7, 1911.0], [59.8, 1911.0], [59.9, 1911.0], [60.0, 2043.0], [60.1, 2043.0], [60.2, 2043.0], [60.3, 2043.0], [60.4, 2043.0], [60.5, 2043.0], [60.6, 2043.0], [60.7, 2043.0], [60.8, 2043.0], [60.9, 2043.0], [61.0, 2434.0], [61.1, 2434.0], [61.2, 2434.0], [61.3, 2434.0], [61.4, 2434.0], [61.5, 2434.0], [61.6, 2434.0], [61.7, 2434.0], [61.8, 2434.0], [61.9, 2434.0], [62.0, 2485.0], [62.1, 2485.0], [62.2, 2485.0], [62.3, 2485.0], [62.4, 2485.0], [62.5, 2485.0], [62.6, 2485.0], [62.7, 2485.0], [62.8, 2485.0], [62.9, 2485.0], [63.0, 2542.0], [63.1, 2542.0], [63.2, 2542.0], [63.3, 2542.0], [63.4, 2542.0], [63.5, 2542.0], [63.6, 2542.0], [63.7, 2542.0], [63.8, 2542.0], [63.9, 2542.0], [64.0, 2609.0], [64.1, 2609.0], [64.2, 2609.0], [64.3, 2609.0], [64.4, 2609.0], [64.5, 2609.0], [64.6, 2609.0], [64.7, 2609.0], [64.8, 2609.0], [64.9, 2609.0], [65.0, 2621.0], [65.1, 2621.0], [65.2, 2621.0], [65.3, 2621.0], [65.4, 2621.0], [65.5, 2621.0], [65.6, 2621.0], [65.7, 2621.0], [65.8, 2621.0], [65.9, 2621.0], [66.0, 2644.0], [66.1, 2644.0], [66.2, 2644.0], [66.3, 2644.0], [66.4, 2644.0], [66.5, 2644.0], [66.6, 2644.0], [66.7, 2644.0], [66.8, 2644.0], [66.9, 2644.0], [67.0, 2661.0], [67.1, 2661.0], [67.2, 2661.0], [67.3, 2661.0], [67.4, 2661.0], [67.5, 2661.0], [67.6, 2661.0], [67.7, 2661.0], [67.8, 2661.0], [67.9, 2661.0], [68.0, 2668.0], [68.1, 2668.0], [68.2, 2668.0], [68.3, 2668.0], [68.4, 2668.0], [68.5, 2668.0], [68.6, 2668.0], [68.7, 2668.0], [68.8, 2668.0], [68.9, 2668.0], [69.0, 2697.0], [69.1, 2697.0], [69.2, 2697.0], [69.3, 2697.0], [69.4, 2697.0], [69.5, 2697.0], [69.6, 2697.0], [69.7, 2697.0], [69.8, 2697.0], [69.9, 2697.0], [70.0, 2716.0], [70.1, 2716.0], [70.2, 2716.0], [70.3, 2716.0], [70.4, 2716.0], [70.5, 2716.0], [70.6, 2716.0], [70.7, 2716.0], [70.8, 2716.0], [70.9, 2716.0], [71.0, 2858.0], [71.1, 2858.0], [71.2, 2858.0], [71.3, 2858.0], [71.4, 2858.0], [71.5, 2858.0], [71.6, 2858.0], [71.7, 2858.0], [71.8, 2858.0], [71.9, 2858.0], [72.0, 2922.0], [72.1, 2922.0], [72.2, 2922.0], [72.3, 2922.0], [72.4, 2922.0], [72.5, 2922.0], [72.6, 2922.0], [72.7, 2922.0], [72.8, 2922.0], [72.9, 2922.0], [73.0, 2941.0], [73.1, 2941.0], [73.2, 2941.0], [73.3, 2941.0], [73.4, 2941.0], [73.5, 2941.0], [73.6, 2941.0], [73.7, 2941.0], [73.8, 2941.0], [73.9, 2941.0], [74.0, 3260.0], [74.1, 3260.0], [74.2, 3260.0], [74.3, 3260.0], [74.4, 3260.0], [74.5, 3260.0], [74.6, 3260.0], [74.7, 3260.0], [74.8, 3260.0], [74.9, 3260.0], [75.0, 3270.0], [75.1, 3270.0], [75.2, 3270.0], [75.3, 3270.0], [75.4, 3270.0], [75.5, 3270.0], [75.6, 3270.0], [75.7, 3270.0], [75.8, 3270.0], [75.9, 3270.0], [76.0, 3511.0], [76.1, 3511.0], [76.2, 3511.0], [76.3, 3511.0], [76.4, 3511.0], [76.5, 3511.0], [76.6, 3511.0], [76.7, 3511.0], [76.8, 3511.0], [76.9, 3511.0], [77.0, 3566.0], [77.1, 3566.0], [77.2, 3566.0], [77.3, 3566.0], [77.4, 3566.0], [77.5, 3566.0], [77.6, 3566.0], [77.7, 3566.0], [77.8, 3566.0], [77.9, 3566.0], [78.0, 3581.0], [78.1, 3581.0], [78.2, 3581.0], [78.3, 3581.0], [78.4, 3581.0], [78.5, 3581.0], [78.6, 3581.0], [78.7, 3581.0], [78.8, 3581.0], [78.9, 3581.0], [79.0, 3590.0], [79.1, 3590.0], [79.2, 3590.0], [79.3, 3590.0], [79.4, 3590.0], [79.5, 3590.0], [79.6, 3590.0], [79.7, 3590.0], [79.8, 3590.0], [79.9, 3590.0], [80.0, 3596.0], [80.1, 3596.0], [80.2, 3596.0], [80.3, 3596.0], [80.4, 3596.0], [80.5, 3596.0], [80.6, 3596.0], [80.7, 3596.0], [80.8, 3596.0], [80.9, 3596.0], [81.0, 3658.0], [81.1, 3658.0], [81.2, 3658.0], [81.3, 3658.0], [81.4, 3658.0], [81.5, 3658.0], [81.6, 3658.0], [81.7, 3658.0], [81.8, 3658.0], [81.9, 3658.0], [82.0, 3667.0], [82.1, 3667.0], [82.2, 3667.0], [82.3, 3667.0], [82.4, 3667.0], [82.5, 3667.0], [82.6, 3667.0], [82.7, 3667.0], [82.8, 3667.0], [82.9, 3667.0], [83.0, 3703.0], [83.1, 3703.0], [83.2, 3703.0], [83.3, 3703.0], [83.4, 3703.0], [83.5, 3703.0], [83.6, 3703.0], [83.7, 3703.0], [83.8, 3703.0], [83.9, 3703.0], [84.0, 3704.0], [84.1, 3704.0], [84.2, 3704.0], [84.3, 3704.0], [84.4, 3704.0], [84.5, 3704.0], [84.6, 3704.0], [84.7, 3704.0], [84.8, 3704.0], [84.9, 3704.0], [85.0, 3754.0], [85.1, 3754.0], [85.2, 3754.0], [85.3, 3754.0], [85.4, 3754.0], [85.5, 3754.0], [85.6, 3754.0], [85.7, 3754.0], [85.8, 3754.0], [85.9, 3754.0], [86.0, 3759.0], [86.1, 3759.0], [86.2, 3759.0], [86.3, 3759.0], [86.4, 3759.0], [86.5, 3759.0], [86.6, 3759.0], [86.7, 3759.0], [86.8, 3759.0], [86.9, 3759.0], [87.0, 3997.0], [87.1, 3997.0], [87.2, 3997.0], [87.3, 3997.0], [87.4, 3997.0], [87.5, 3997.0], [87.6, 3997.0], [87.7, 3997.0], [87.8, 3997.0], [87.9, 3997.0], [88.0, 4119.0], [88.1, 4119.0], [88.2, 4119.0], [88.3, 4119.0], [88.4, 4119.0], [88.5, 4119.0], [88.6, 4119.0], [88.7, 4119.0], [88.8, 4119.0], [88.9, 4119.0], [89.0, 4142.0], [89.1, 4142.0], [89.2, 4142.0], [89.3, 4142.0], [89.4, 4142.0], [89.5, 4142.0], [89.6, 4142.0], [89.7, 4142.0], [89.8, 4142.0], [89.9, 4142.0], [90.0, 4144.0], [90.1, 4144.0], [90.2, 4144.0], [90.3, 4144.0], [90.4, 4144.0], [90.5, 4144.0], [90.6, 4144.0], [90.7, 4144.0], [90.8, 4144.0], [90.9, 4144.0], [91.0, 4199.0], [91.1, 4199.0], [91.2, 4199.0], [91.3, 4199.0], [91.4, 4199.0], [91.5, 4199.0], [91.6, 4199.0], [91.7, 4199.0], [91.8, 4199.0], [91.9, 4199.0], [92.0, 4210.0], [92.1, 4210.0], [92.2, 4210.0], [92.3, 4210.0], [92.4, 4210.0], [92.5, 4210.0], [92.6, 4210.0], [92.7, 4210.0], [92.8, 4210.0], [92.9, 4210.0], [93.0, 4495.0], [93.1, 4495.0], [93.2, 4495.0], [93.3, 4495.0], [93.4, 4495.0], [93.5, 4495.0], [93.6, 4495.0], [93.7, 4495.0], [93.8, 4495.0], [93.9, 4495.0], [94.0, 4499.0], [94.1, 4499.0], [94.2, 4499.0], [94.3, 4499.0], [94.4, 4499.0], [94.5, 4499.0], [94.6, 4499.0], [94.7, 4499.0], [94.8, 4499.0], [94.9, 4499.0], [95.0, 4536.0], [95.1, 4536.0], [95.2, 4536.0], [95.3, 4536.0], [95.4, 4536.0], [95.5, 4536.0], [95.6, 4536.0], [95.7, 4536.0], [95.8, 4536.0], [95.9, 4536.0], [96.0, 4583.0], [96.1, 4583.0], [96.2, 4583.0], [96.3, 4583.0], [96.4, 4583.0], [96.5, 4583.0], [96.6, 4583.0], [96.7, 4583.0], [96.8, 4583.0], [96.9, 4583.0], [97.0, 4586.0], [97.1, 4586.0], [97.2, 4586.0], [97.3, 4586.0], [97.4, 4586.0], [97.5, 4586.0], [97.6, 4586.0], [97.7, 4586.0], [97.8, 4586.0], [97.9, 4586.0], [98.0, 4586.0], [98.1, 4586.0], [98.2, 4586.0], [98.3, 4586.0], [98.4, 4586.0], [98.5, 4586.0], [98.6, 4586.0], [98.7, 4586.0], [98.8, 4586.0], [98.9, 4586.0], [99.0, 4650.0], [99.1, 4650.0], [99.2, 4650.0], [99.3, 4650.0], [99.4, 4650.0], [99.5, 4650.0], [99.6, 4650.0], [99.7, 4650.0], [99.8, 4650.0], [99.9, 4650.0]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[0.0, 248.0], [0.1, 248.0], [0.2, 248.0], [0.3, 248.0], [0.4, 248.0], [0.5, 248.0], [0.6, 248.0], [0.7, 248.0], [0.8, 248.0], [0.9, 248.0], [1.0, 262.0], [1.1, 262.0], [1.2, 262.0], [1.3, 262.0], [1.4, 262.0], [1.5, 262.0], [1.6, 262.0], [1.7, 262.0], [1.8, 262.0], [1.9, 262.0], [2.0, 302.0], [2.1, 302.0], [2.2, 302.0], [2.3, 302.0], [2.4, 302.0], [2.5, 302.0], [2.6, 302.0], [2.7, 302.0], [2.8, 302.0], [2.9, 302.0], [3.0, 305.0], [3.1, 305.0], [3.2, 305.0], [3.3, 305.0], [3.4, 305.0], [3.5, 305.0], [3.6, 305.0], [3.7, 305.0], [3.8, 305.0], [3.9, 305.0], [4.0, 312.0], [4.1, 312.0], [4.2, 312.0], [4.3, 312.0], [4.4, 312.0], [4.5, 312.0], [4.6, 312.0], [4.7, 312.0], [4.8, 312.0], [4.9, 312.0], [5.0, 331.0], [5.1, 331.0], [5.2, 331.0], [5.3, 331.0], [5.4, 331.0], [5.5, 331.0], [5.6, 331.0], [5.7, 331.0], [5.8, 331.0], [5.9, 331.0], [6.0, 364.0], [6.1, 364.0], [6.2, 364.0], [6.3, 364.0], [6.4, 364.0], [6.5, 364.0], [6.6, 364.0], [6.7, 364.0], [6.8, 364.0], [6.9, 364.0], [7.0, 376.0], [7.1, 376.0], [7.2, 376.0], [7.3, 376.0], [7.4, 376.0], [7.5, 376.0], [7.6, 376.0], [7.7, 376.0], [7.8, 376.0], [7.9, 376.0], [8.0, 377.0], [8.1, 377.0], [8.2, 377.0], [8.3, 377.0], [8.4, 377.0], [8.5, 377.0], [8.6, 377.0], [8.7, 377.0], [8.8, 377.0], [8.9, 377.0], [9.0, 391.0], [9.1, 391.0], [9.2, 391.0], [9.3, 391.0], [9.4, 391.0], [9.5, 391.0], [9.6, 391.0], [9.7, 391.0], [9.8, 391.0], [9.9, 391.0], [10.0, 397.0], [10.1, 397.0], [10.2, 397.0], [10.3, 397.0], [10.4, 397.0], [10.5, 397.0], [10.6, 397.0], [10.7, 397.0], [10.8, 397.0], [10.9, 397.0], [11.0, 411.0], [11.1, 411.0], [11.2, 411.0], [11.3, 411.0], [11.4, 411.0], [11.5, 411.0], [11.6, 411.0], [11.7, 411.0], [11.8, 411.0], [11.9, 411.0], [12.0, 424.0], [12.1, 424.0], [12.2, 424.0], [12.3, 424.0], [12.4, 424.0], [12.5, 424.0], [12.6, 424.0], [12.7, 424.0], [12.8, 424.0], [12.9, 424.0], [13.0, 425.0], [13.1, 425.0], [13.2, 425.0], [13.3, 425.0], [13.4, 425.0], [13.5, 425.0], [13.6, 425.0], [13.7, 425.0], [13.8, 425.0], [13.9, 425.0], [14.0, 433.0], [14.1, 433.0], [14.2, 433.0], [14.3, 433.0], [14.4, 433.0], [14.5, 433.0], [14.6, 433.0], [14.7, 433.0], [14.8, 433.0], [14.9, 433.0], [15.0, 452.0], [15.1, 452.0], [15.2, 452.0], [15.3, 452.0], [15.4, 452.0], [15.5, 452.0], [15.6, 452.0], [15.7, 452.0], [15.8, 452.0], [15.9, 452.0], [16.0, 452.0], [16.1, 452.0], [16.2, 452.0], [16.3, 452.0], [16.4, 452.0], [16.5, 452.0], [16.6, 452.0], [16.7, 452.0], [16.8, 452.0], [16.9, 452.0], [17.0, 462.0], [17.1, 462.0], [17.2, 462.0], [17.3, 462.0], [17.4, 462.0], [17.5, 462.0], [17.6, 462.0], [17.7, 462.0], [17.8, 462.0], [17.9, 462.0], [18.0, 462.0], [18.1, 462.0], [18.2, 462.0], [18.3, 462.0], [18.4, 462.0], [18.5, 462.0], [18.6, 462.0], [18.7, 462.0], [18.8, 462.0], [18.9, 462.0], [19.0, 477.0], [19.1, 477.0], [19.2, 477.0], [19.3, 477.0], [19.4, 477.0], [19.5, 477.0], [19.6, 477.0], [19.7, 477.0], [19.8, 477.0], [19.9, 477.0], [20.0, 477.0], [20.1, 477.0], [20.2, 477.0], [20.3, 477.0], [20.4, 477.0], [20.5, 477.0], [20.6, 477.0], [20.7, 477.0], [20.8, 477.0], [20.9, 477.0], [21.0, 482.0], [21.1, 482.0], [21.2, 482.0], [21.3, 482.0], [21.4, 482.0], [21.5, 482.0], [21.6, 482.0], [21.7, 482.0], [21.8, 482.0], [21.9, 482.0], [22.0, 503.0], [22.1, 503.0], [22.2, 503.0], [22.3, 503.0], [22.4, 503.0], [22.5, 503.0], [22.6, 503.0], [22.7, 503.0], [22.8, 503.0], [22.9, 503.0], [23.0, 509.0], [23.1, 509.0], [23.2, 509.0], [23.3, 509.0], [23.4, 509.0], [23.5, 509.0], [23.6, 509.0], [23.7, 509.0], [23.8, 509.0], [23.9, 509.0], [24.0, 521.0], [24.1, 521.0], [24.2, 521.0], [24.3, 521.0], [24.4, 521.0], [24.5, 521.0], [24.6, 521.0], [24.7, 521.0], [24.8, 521.0], [24.9, 521.0], [25.0, 530.0], [25.1, 530.0], [25.2, 530.0], [25.3, 530.0], [25.4, 530.0], [25.5, 530.0], [25.6, 530.0], [25.7, 530.0], [25.8, 530.0], [25.9, 530.0], [26.0, 531.0], [26.1, 531.0], [26.2, 531.0], [26.3, 531.0], [26.4, 531.0], [26.5, 531.0], [26.6, 531.0], [26.7, 531.0], [26.8, 531.0], [26.9, 531.0], [27.0, 545.0], [27.1, 545.0], [27.2, 545.0], [27.3, 545.0], [27.4, 545.0], [27.5, 545.0], [27.6, 545.0], [27.7, 545.0], [27.8, 545.0], [27.9, 545.0], [28.0, 548.0], [28.1, 548.0], [28.2, 548.0], [28.3, 548.0], [28.4, 548.0], [28.5, 548.0], [28.6, 548.0], [28.7, 548.0], [28.8, 548.0], [28.9, 548.0], [29.0, 556.0], [29.1, 556.0], [29.2, 556.0], [29.3, 556.0], [29.4, 556.0], [29.5, 556.0], [29.6, 556.0], [29.7, 556.0], [29.8, 556.0], [29.9, 556.0], [30.0, 565.0], [30.1, 565.0], [30.2, 565.0], [30.3, 565.0], [30.4, 565.0], [30.5, 565.0], [30.6, 565.0], [30.7, 565.0], [30.8, 565.0], [30.9, 565.0], [31.0, 580.0], [31.1, 580.0], [31.2, 580.0], [31.3, 580.0], [31.4, 580.0], [31.5, 580.0], [31.6, 580.0], [31.7, 580.0], [31.8, 580.0], [31.9, 580.0], [32.0, 601.0], [32.1, 601.0], [32.2, 601.0], [32.3, 601.0], [32.4, 601.0], [32.5, 601.0], [32.6, 601.0], [32.7, 601.0], [32.8, 601.0], [32.9, 601.0], [33.0, 617.0], [33.1, 617.0], [33.2, 617.0], [33.3, 617.0], [33.4, 617.0], [33.5, 617.0], [33.6, 617.0], [33.7, 617.0], [33.8, 617.0], [33.9, 617.0], [34.0, 626.0], [34.1, 626.0], [34.2, 626.0], [34.3, 626.0], [34.4, 626.0], [34.5, 626.0], [34.6, 626.0], [34.7, 626.0], [34.8, 626.0], [34.9, 626.0], [35.0, 634.0], [35.1, 634.0], [35.2, 634.0], [35.3, 634.0], [35.4, 634.0], [35.5, 634.0], [35.6, 634.0], [35.7, 634.0], [35.8, 634.0], [35.9, 634.0], [36.0, 641.0], [36.1, 641.0], [36.2, 641.0], [36.3, 641.0], [36.4, 641.0], [36.5, 641.0], [36.6, 641.0], [36.7, 641.0], [36.8, 641.0], [36.9, 641.0], [37.0, 649.0], [37.1, 649.0], [37.2, 649.0], [37.3, 649.0], [37.4, 649.0], [37.5, 649.0], [37.6, 649.0], [37.7, 649.0], [37.8, 649.0], [37.9, 649.0], [38.0, 655.0], [38.1, 655.0], [38.2, 655.0], [38.3, 655.0], [38.4, 655.0], [38.5, 655.0], [38.6, 655.0], [38.7, 655.0], [38.8, 655.0], [38.9, 655.0], [39.0, 662.0], [39.1, 662.0], [39.2, 662.0], [39.3, 662.0], [39.4, 662.0], [39.5, 662.0], [39.6, 662.0], [39.7, 662.0], [39.8, 662.0], [39.9, 662.0], [40.0, 671.0], [40.1, 671.0], [40.2, 671.0], [40.3, 671.0], [40.4, 671.0], [40.5, 671.0], [40.6, 671.0], [40.7, 671.0], [40.8, 671.0], [40.9, 671.0], [41.0, 671.0], [41.1, 671.0], [41.2, 671.0], [41.3, 671.0], [41.4, 671.0], [41.5, 671.0], [41.6, 671.0], [41.7, 671.0], [41.8, 671.0], [41.9, 671.0], [42.0, 707.0], [42.1, 707.0], [42.2, 707.0], [42.3, 707.0], [42.4, 707.0], [42.5, 707.0], [42.6, 707.0], [42.7, 707.0], [42.8, 707.0], [42.9, 707.0], [43.0, 714.0], [43.1, 714.0], [43.2, 714.0], [43.3, 714.0], [43.4, 714.0], [43.5, 714.0], [43.6, 714.0], [43.7, 714.0], [43.8, 714.0], [43.9, 714.0], [44.0, 751.0], [44.1, 751.0], [44.2, 751.0], [44.3, 751.0], [44.4, 751.0], [44.5, 751.0], [44.6, 751.0], [44.7, 751.0], [44.8, 751.0], [44.9, 751.0], [45.0, 759.0], [45.1, 759.0], [45.2, 759.0], [45.3, 759.0], [45.4, 759.0], [45.5, 759.0], [45.6, 759.0], [45.7, 759.0], [45.8, 759.0], [45.9, 759.0], [46.0, 767.0], [46.1, 767.0], [46.2, 767.0], [46.3, 767.0], [46.4, 767.0], [46.5, 767.0], [46.6, 767.0], [46.7, 767.0], [46.8, 767.0], [46.9, 767.0], [47.0, 768.0], [47.1, 768.0], [47.2, 768.0], [47.3, 768.0], [47.4, 768.0], [47.5, 768.0], [47.6, 768.0], [47.7, 768.0], [47.8, 768.0], [47.9, 768.0], [48.0, 769.0], [48.1, 769.0], [48.2, 769.0], [48.3, 769.0], [48.4, 769.0], [48.5, 769.0], [48.6, 769.0], [48.7, 769.0], [48.8, 769.0], [48.9, 769.0], [49.0, 786.0], [49.1, 786.0], [49.2, 786.0], [49.3, 786.0], [49.4, 786.0], [49.5, 786.0], [49.6, 786.0], [49.7, 786.0], [49.8, 786.0], [49.9, 786.0], [50.0, 794.0], [50.1, 794.0], [50.2, 794.0], [50.3, 794.0], [50.4, 794.0], [50.5, 794.0], [50.6, 794.0], [50.7, 794.0], [50.8, 794.0], [50.9, 794.0], [51.0, 813.0], [51.1, 813.0], [51.2, 813.0], [51.3, 813.0], [51.4, 813.0], [51.5, 813.0], [51.6, 813.0], [51.7, 813.0], [51.8, 813.0], [51.9, 813.0], [52.0, 817.0], [52.1, 817.0], [52.2, 817.0], [52.3, 817.0], [52.4, 817.0], [52.5, 817.0], [52.6, 817.0], [52.7, 817.0], [52.8, 817.0], [52.9, 817.0], [53.0, 824.0], [53.1, 824.0], [53.2, 824.0], [53.3, 824.0], [53.4, 824.0], [53.5, 824.0], [53.6, 824.0], [53.7, 824.0], [53.8, 824.0], [53.9, 824.0], [54.0, 831.0], [54.1, 831.0], [54.2, 831.0], [54.3, 831.0], [54.4, 831.0], [54.5, 831.0], [54.6, 831.0], [54.7, 831.0], [54.8, 831.0], [54.9, 831.0], [55.0, 832.0], [55.1, 832.0], [55.2, 832.0], [55.3, 832.0], [55.4, 832.0], [55.5, 832.0], [55.6, 832.0], [55.7, 832.0], [55.8, 832.0], [55.9, 832.0], [56.0, 841.0], [56.1, 841.0], [56.2, 841.0], [56.3, 841.0], [56.4, 841.0], [56.5, 841.0], [56.6, 841.0], [56.7, 841.0], [56.8, 841.0], [56.9, 841.0], [57.0, 843.0], [57.1, 843.0], [57.2, 843.0], [57.3, 843.0], [57.4, 843.0], [57.5, 843.0], [57.6, 843.0], [57.7, 843.0], [57.8, 843.0], [57.9, 843.0], [58.0, 859.0], [58.1, 859.0], [58.2, 859.0], [58.3, 859.0], [58.4, 859.0], [58.5, 859.0], [58.6, 859.0], [58.7, 859.0], [58.8, 859.0], [58.9, 859.0], [59.0, 872.0], [59.1, 872.0], [59.2, 872.0], [59.3, 872.0], [59.4, 872.0], [59.5, 872.0], [59.6, 872.0], [59.7, 872.0], [59.8, 872.0], [59.9, 872.0], [60.0, 885.0], [60.1, 885.0], [60.2, 885.0], [60.3, 885.0], [60.4, 885.0], [60.5, 885.0], [60.6, 885.0], [60.7, 885.0], [60.8, 885.0], [60.9, 885.0], [61.0, 889.0], [61.1, 889.0], [61.2, 889.0], [61.3, 889.0], [61.4, 889.0], [61.5, 889.0], [61.6, 889.0], [61.7, 889.0], [61.8, 889.0], [61.9, 889.0], [62.0, 897.0], [62.1, 897.0], [62.2, 897.0], [62.3, 897.0], [62.4, 897.0], [62.5, 897.0], [62.6, 897.0], [62.7, 897.0], [62.8, 897.0], [62.9, 897.0], [63.0, 900.0], [63.1, 900.0], [63.2, 900.0], [63.3, 900.0], [63.4, 900.0], [63.5, 900.0], [63.6, 900.0], [63.7, 900.0], [63.8, 900.0], [63.9, 900.0], [64.0, 935.0], [64.1, 935.0], [64.2, 935.0], [64.3, 935.0], [64.4, 935.0], [64.5, 935.0], [64.6, 935.0], [64.7, 935.0], [64.8, 935.0], [64.9, 935.0], [65.0, 945.0], [65.1, 945.0], [65.2, 945.0], [65.3, 945.0], [65.4, 945.0], [65.5, 945.0], [65.6, 945.0], [65.7, 945.0], [65.8, 945.0], [65.9, 945.0], [66.0, 952.0], [66.1, 952.0], [66.2, 952.0], [66.3, 952.0], [66.4, 952.0], [66.5, 952.0], [66.6, 952.0], [66.7, 952.0], [66.8, 952.0], [66.9, 952.0], [67.0, 960.0], [67.1, 960.0], [67.2, 960.0], [67.3, 960.0], [67.4, 960.0], [67.5, 960.0], [67.6, 960.0], [67.7, 960.0], [67.8, 960.0], [67.9, 960.0], [68.0, 963.0], [68.1, 963.0], [68.2, 963.0], [68.3, 963.0], [68.4, 963.0], [68.5, 963.0], [68.6, 963.0], [68.7, 963.0], [68.8, 963.0], [68.9, 963.0], [69.0, 982.0], [69.1, 982.0], [69.2, 982.0], [69.3, 982.0], [69.4, 982.0], [69.5, 982.0], [69.6, 982.0], [69.7, 982.0], [69.8, 982.0], [69.9, 982.0], [70.0, 986.0], [70.1, 986.0], [70.2, 986.0], [70.3, 986.0], [70.4, 986.0], [70.5, 986.0], [70.6, 986.0], [70.7, 986.0], [70.8, 986.0], [70.9, 986.0], [71.0, 1001.0], [71.1, 1001.0], [71.2, 1001.0], [71.3, 1001.0], [71.4, 1001.0], [71.5, 1001.0], [71.6, 1001.0], [71.7, 1001.0], [71.8, 1001.0], [71.9, 1001.0], [72.0, 1014.0], [72.1, 1014.0], [72.2, 1014.0], [72.3, 1014.0], [72.4, 1014.0], [72.5, 1014.0], [72.6, 1014.0], [72.7, 1014.0], [72.8, 1014.0], [72.9, 1014.0], [73.0, 1036.0], [73.1, 1036.0], [73.2, 1036.0], [73.3, 1036.0], [73.4, 1036.0], [73.5, 1036.0], [73.6, 1036.0], [73.7, 1036.0], [73.8, 1036.0], [73.9, 1036.0], [74.0, 1041.0], [74.1, 1041.0], [74.2, 1041.0], [74.3, 1041.0], [74.4, 1041.0], [74.5, 1041.0], [74.6, 1041.0], [74.7, 1041.0], [74.8, 1041.0], [74.9, 1041.0], [75.0, 1041.0], [75.1, 1041.0], [75.2, 1041.0], [75.3, 1041.0], [75.4, 1041.0], [75.5, 1041.0], [75.6, 1041.0], [75.7, 1041.0], [75.8, 1041.0], [75.9, 1041.0], [76.0, 1043.0], [76.1, 1043.0], [76.2, 1043.0], [76.3, 1043.0], [76.4, 1043.0], [76.5, 1043.0], [76.6, 1043.0], [76.7, 1043.0], [76.8, 1043.0], [76.9, 1043.0], [77.0, 1055.0], [77.1, 1055.0], [77.2, 1055.0], [77.3, 1055.0], [77.4, 1055.0], [77.5, 1055.0], [77.6, 1055.0], [77.7, 1055.0], [77.8, 1055.0], [77.9, 1055.0], [78.0, 1056.0], [78.1, 1056.0], [78.2, 1056.0], [78.3, 1056.0], [78.4, 1056.0], [78.5, 1056.0], [78.6, 1056.0], [78.7, 1056.0], [78.8, 1056.0], [78.9, 1056.0], [79.0, 1060.0], [79.1, 1060.0], [79.2, 1060.0], [79.3, 1060.0], [79.4, 1060.0], [79.5, 1060.0], [79.6, 1060.0], [79.7, 1060.0], [79.8, 1060.0], [79.9, 1060.0], [80.0, 1071.0], [80.1, 1071.0], [80.2, 1071.0], [80.3, 1071.0], [80.4, 1071.0], [80.5, 1071.0], [80.6, 1071.0], [80.7, 1071.0], [80.8, 1071.0], [80.9, 1071.0], [81.0, 1073.0], [81.1, 1073.0], [81.2, 1073.0], [81.3, 1073.0], [81.4, 1073.0], [81.5, 1073.0], [81.6, 1073.0], [81.7, 1073.0], [81.8, 1073.0], [81.9, 1073.0], [82.0, 1087.0], [82.1, 1087.0], [82.2, 1087.0], [82.3, 1087.0], [82.4, 1087.0], [82.5, 1087.0], [82.6, 1087.0], [82.7, 1087.0], [82.8, 1087.0], [82.9, 1087.0], [83.0, 1092.0], [83.1, 1092.0], [83.2, 1092.0], [83.3, 1092.0], [83.4, 1092.0], [83.5, 1092.0], [83.6, 1092.0], [83.7, 1092.0], [83.8, 1092.0], [83.9, 1092.0], [84.0, 1101.0], [84.1, 1101.0], [84.2, 1101.0], [84.3, 1101.0], [84.4, 1101.0], [84.5, 1101.0], [84.6, 1101.0], [84.7, 1101.0], [84.8, 1101.0], [84.9, 1101.0], [85.0, 1115.0], [85.1, 1115.0], [85.2, 1115.0], [85.3, 1115.0], [85.4, 1115.0], [85.5, 1115.0], [85.6, 1115.0], [85.7, 1115.0], [85.8, 1115.0], [85.9, 1115.0], [86.0, 1145.0], [86.1, 1145.0], [86.2, 1145.0], [86.3, 1145.0], [86.4, 1145.0], [86.5, 1145.0], [86.6, 1145.0], [86.7, 1145.0], [86.8, 1145.0], [86.9, 1145.0], [87.0, 1150.0], [87.1, 1150.0], [87.2, 1150.0], [87.3, 1150.0], [87.4, 1150.0], [87.5, 1150.0], [87.6, 1150.0], [87.7, 1150.0], [87.8, 1150.0], [87.9, 1150.0], [88.0, 1150.0], [88.1, 1150.0], [88.2, 1150.0], [88.3, 1150.0], [88.4, 1150.0], [88.5, 1150.0], [88.6, 1150.0], [88.7, 1150.0], [88.8, 1150.0], [88.9, 1150.0], [89.0, 1150.0], [89.1, 1150.0], [89.2, 1150.0], [89.3, 1150.0], [89.4, 1150.0], [89.5, 1150.0], [89.6, 1150.0], [89.7, 1150.0], [89.8, 1150.0], [89.9, 1150.0], [90.0, 1150.0], [90.1, 1150.0], [90.2, 1150.0], [90.3, 1150.0], [90.4, 1150.0], [90.5, 1150.0], [90.6, 1150.0], [90.7, 1150.0], [90.8, 1150.0], [90.9, 1150.0], [91.0, 1150.0], [91.1, 1150.0], [91.2, 1150.0], [91.3, 1150.0], [91.4, 1150.0], [91.5, 1150.0], [91.6, 1150.0], [91.7, 1150.0], [91.8, 1150.0], [91.9, 1150.0], [92.0, 1151.0], [92.1, 1151.0], [92.2, 1151.0], [92.3, 1151.0], [92.4, 1151.0], [92.5, 1151.0], [92.6, 1151.0], [92.7, 1151.0], [92.8, 1151.0], [92.9, 1151.0], [93.0, 1155.0], [93.1, 1155.0], [93.2, 1155.0], [93.3, 1155.0], [93.4, 1155.0], [93.5, 1155.0], [93.6, 1155.0], [93.7, 1155.0], [93.8, 1155.0], [93.9, 1155.0], [94.0, 1162.0], [94.1, 1162.0], [94.2, 1162.0], [94.3, 1162.0], [94.4, 1162.0], [94.5, 1162.0], [94.6, 1162.0], [94.7, 1162.0], [94.8, 1162.0], [94.9, 1162.0], [95.0, 1185.0], [95.1, 1185.0], [95.2, 1185.0], [95.3, 1185.0], [95.4, 1185.0], [95.5, 1185.0], [95.6, 1185.0], [95.7, 1185.0], [95.8, 1185.0], [95.9, 1185.0], [96.0, 1191.0], [96.1, 1191.0], [96.2, 1191.0], [96.3, 1191.0], [96.4, 1191.0], [96.5, 1191.0], [96.6, 1191.0], [96.7, 1191.0], [96.8, 1191.0], [96.9, 1191.0], [97.0, 1192.0], [97.1, 1192.0], [97.2, 1192.0], [97.3, 1192.0], [97.4, 1192.0], [97.5, 1192.0], [97.6, 1192.0], [97.7, 1192.0], [97.8, 1192.0], [97.9, 1192.0], [98.0, 1210.0], [98.1, 1210.0], [98.2, 1210.0], [98.3, 1210.0], [98.4, 1210.0], [98.5, 1210.0], [98.6, 1210.0], [98.7, 1210.0], [98.8, 1210.0], [98.9, 1210.0], [99.0, 1232.0], [99.1, 1232.0], [99.2, 1232.0], [99.3, 1232.0], [99.4, 1232.0], [99.5, 1232.0], [99.6, 1232.0], [99.7, 1232.0], [99.8, 1232.0], [99.9, 1232.0]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[0.0, 927.0], [0.1, 927.0], [0.2, 927.0], [0.3, 927.0], [0.4, 927.0], [0.5, 927.0], [0.6, 927.0], [0.7, 927.0], [0.8, 927.0], [0.9, 927.0], [1.0, 1027.0], [1.1, 1027.0], [1.2, 1027.0], [1.3, 1027.0], [1.4, 1027.0], [1.5, 1027.0], [1.6, 1027.0], [1.7, 1027.0], [1.8, 1027.0], [1.9, 1027.0], [2.0, 1029.0], [2.1, 1029.0], [2.2, 1029.0], [2.3, 1029.0], [2.4, 1029.0], [2.5, 1029.0], [2.6, 1029.0], [2.7, 1029.0], [2.8, 1029.0], [2.9, 1029.0], [3.0, 1050.0], [3.1, 1050.0], [3.2, 1050.0], [3.3, 1050.0], [3.4, 1050.0], [3.5, 1050.0], [3.6, 1050.0], [3.7, 1050.0], [3.8, 1050.0], [3.9, 1050.0], [4.0, 1068.0], [4.1, 1068.0], [4.2, 1068.0], [4.3, 1068.0], [4.4, 1068.0], [4.5, 1068.0], [4.6, 1068.0], [4.7, 1068.0], [4.8, 1068.0], [4.9, 1068.0], [5.0, 1077.0], [5.1, 1077.0], [5.2, 1077.0], [5.3, 1077.0], [5.4, 1077.0], [5.5, 1077.0], [5.6, 1077.0], [5.7, 1077.0], [5.8, 1077.0], [5.9, 1077.0], [6.0, 1078.0], [6.1, 1078.0], [6.2, 1078.0], [6.3, 1078.0], [6.4, 1078.0], [6.5, 1078.0], [6.6, 1078.0], [6.7, 1078.0], [6.8, 1078.0], [6.9, 1078.0], [7.0, 1098.0], [7.1, 1098.0], [7.2, 1098.0], [7.3, 1098.0], [7.4, 1098.0], [7.5, 1098.0], [7.6, 1098.0], [7.7, 1098.0], [7.8, 1098.0], [7.9, 1098.0], [8.0, 1159.0], [8.1, 1159.0], [8.2, 1159.0], [8.3, 1159.0], [8.4, 1159.0], [8.5, 1159.0], [8.6, 1159.0], [8.7, 1159.0], [8.8, 1159.0], [8.9, 1159.0], [9.0, 1166.0], [9.1, 1166.0], [9.2, 1166.0], [9.3, 1166.0], [9.4, 1166.0], [9.5, 1166.0], [9.6, 1166.0], [9.7, 1166.0], [9.8, 1166.0], [9.9, 1166.0], [10.0, 1168.0], [10.1, 1168.0], [10.2, 1168.0], [10.3, 1168.0], [10.4, 1168.0], [10.5, 1168.0], [10.6, 1168.0], [10.7, 1168.0], [10.8, 1168.0], [10.9, 1168.0], [11.0, 1189.0], [11.1, 1189.0], [11.2, 1189.0], [11.3, 1189.0], [11.4, 1189.0], [11.5, 1189.0], [11.6, 1189.0], [11.7, 1189.0], [11.8, 1189.0], [11.9, 1189.0], [12.0, 1190.0], [12.1, 1190.0], [12.2, 1190.0], [12.3, 1190.0], [12.4, 1190.0], [12.5, 1190.0], [12.6, 1190.0], [12.7, 1190.0], [12.8, 1190.0], [12.9, 1190.0], [13.0, 1200.0], [13.1, 1200.0], [13.2, 1200.0], [13.3, 1200.0], [13.4, 1200.0], [13.5, 1200.0], [13.6, 1200.0], [13.7, 1200.0], [13.8, 1200.0], [13.9, 1200.0], [14.0, 1219.0], [14.1, 1219.0], [14.2, 1219.0], [14.3, 1219.0], [14.4, 1219.0], [14.5, 1219.0], [14.6, 1219.0], [14.7, 1219.0], [14.8, 1219.0], [14.9, 1219.0], [15.0, 1231.0], [15.1, 1231.0], [15.2, 1231.0], [15.3, 1231.0], [15.4, 1231.0], [15.5, 1231.0], [15.6, 1231.0], [15.7, 1231.0], [15.8, 1231.0], [15.9, 1231.0], [16.0, 1276.0], [16.1, 1276.0], [16.2, 1276.0], [16.3, 1276.0], [16.4, 1276.0], [16.5, 1276.0], [16.6, 1276.0], [16.7, 1276.0], [16.8, 1276.0], [16.9, 1276.0], [17.0, 1286.0], [17.1, 1286.0], [17.2, 1286.0], [17.3, 1286.0], [17.4, 1286.0], [17.5, 1286.0], [17.6, 1286.0], [17.7, 1286.0], [17.8, 1286.0], [17.9, 1286.0], [18.0, 1307.0], [18.1, 1307.0], [18.2, 1307.0], [18.3, 1307.0], [18.4, 1307.0], [18.5, 1307.0], [18.6, 1307.0], [18.7, 1307.0], [18.8, 1307.0], [18.9, 1307.0], [19.0, 1319.0], [19.1, 1319.0], [19.2, 1319.0], [19.3, 1319.0], [19.4, 1319.0], [19.5, 1319.0], [19.6, 1319.0], [19.7, 1319.0], [19.8, 1319.0], [19.9, 1319.0], [20.0, 1328.0], [20.1, 1328.0], [20.2, 1328.0], [20.3, 1328.0], [20.4, 1328.0], [20.5, 1328.0], [20.6, 1328.0], [20.7, 1328.0], [20.8, 1328.0], [20.9, 1328.0], [21.0, 1360.0], [21.1, 1360.0], [21.2, 1360.0], [21.3, 1360.0], [21.4, 1360.0], [21.5, 1360.0], [21.6, 1360.0], [21.7, 1360.0], [21.8, 1360.0], [21.9, 1360.0], [22.0, 1379.0], [22.1, 1379.0], [22.2, 1379.0], [22.3, 1379.0], [22.4, 1379.0], [22.5, 1379.0], [22.6, 1379.0], [22.7, 1379.0], [22.8, 1379.0], [22.9, 1379.0], [23.0, 1407.0], [23.1, 1407.0], [23.2, 1407.0], [23.3, 1407.0], [23.4, 1407.0], [23.5, 1407.0], [23.6, 1407.0], [23.7, 1407.0], [23.8, 1407.0], [23.9, 1407.0], [24.0, 1417.0], [24.1, 1417.0], [24.2, 1417.0], [24.3, 1417.0], [24.4, 1417.0], [24.5, 1417.0], [24.6, 1417.0], [24.7, 1417.0], [24.8, 1417.0], [24.9, 1417.0], [25.0, 1428.0], [25.1, 1428.0], [25.2, 1428.0], [25.3, 1428.0], [25.4, 1428.0], [25.5, 1428.0], [25.6, 1428.0], [25.7, 1428.0], [25.8, 1428.0], [25.9, 1428.0], [26.0, 1439.0], [26.1, 1439.0], [26.2, 1439.0], [26.3, 1439.0], [26.4, 1439.0], [26.5, 1439.0], [26.6, 1439.0], [26.7, 1439.0], [26.8, 1439.0], [26.9, 1439.0], [27.0, 1478.0], [27.1, 1478.0], [27.2, 1478.0], [27.3, 1478.0], [27.4, 1478.0], [27.5, 1478.0], [27.6, 1478.0], [27.7, 1478.0], [27.8, 1478.0], [27.9, 1478.0], [28.0, 1480.0], [28.1, 1480.0], [28.2, 1480.0], [28.3, 1480.0], [28.4, 1480.0], [28.5, 1480.0], [28.6, 1480.0], [28.7, 1480.0], [28.8, 1480.0], [28.9, 1480.0], [29.0, 1497.0], [29.1, 1497.0], [29.2, 1497.0], [29.3, 1497.0], [29.4, 1497.0], [29.5, 1497.0], [29.6, 1497.0], [29.7, 1497.0], [29.8, 1497.0], [29.9, 1497.0], [30.0, 1498.0], [30.1, 1498.0], [30.2, 1498.0], [30.3, 1498.0], [30.4, 1498.0], [30.5, 1498.0], [30.6, 1498.0], [30.7, 1498.0], [30.8, 1498.0], [30.9, 1498.0], [31.0, 1519.0], [31.1, 1519.0], [31.2, 1519.0], [31.3, 1519.0], [31.4, 1519.0], [31.5, 1519.0], [31.6, 1519.0], [31.7, 1519.0], [31.8, 1519.0], [31.9, 1519.0], [32.0, 1608.0], [32.1, 1608.0], [32.2, 1608.0], [32.3, 1608.0], [32.4, 1608.0], [32.5, 1608.0], [32.6, 1608.0], [32.7, 1608.0], [32.8, 1608.0], [32.9, 1608.0], [33.0, 1609.0], [33.1, 1609.0], [33.2, 1609.0], [33.3, 1609.0], [33.4, 1609.0], [33.5, 1609.0], [33.6, 1609.0], [33.7, 1609.0], [33.8, 1609.0], [33.9, 1609.0], [34.0, 1631.0], [34.1, 1631.0], [34.2, 1631.0], [34.3, 1631.0], [34.4, 1631.0], [34.5, 1631.0], [34.6, 1631.0], [34.7, 1631.0], [34.8, 1631.0], [34.9, 1631.0], [35.0, 1637.0], [35.1, 1637.0], [35.2, 1637.0], [35.3, 1637.0], [35.4, 1637.0], [35.5, 1637.0], [35.6, 1637.0], [35.7, 1637.0], [35.8, 1637.0], [35.9, 1637.0], [36.0, 1650.0], [36.1, 1650.0], [36.2, 1650.0], [36.3, 1650.0], [36.4, 1650.0], [36.5, 1650.0], [36.6, 1650.0], [36.7, 1650.0], [36.8, 1650.0], [36.9, 1650.0], [37.0, 1657.0], [37.1, 1657.0], [37.2, 1657.0], [37.3, 1657.0], [37.4, 1657.0], [37.5, 1657.0], [37.6, 1657.0], [37.7, 1657.0], [37.8, 1657.0], [37.9, 1657.0], [38.0, 1706.0], [38.1, 1706.0], [38.2, 1706.0], [38.3, 1706.0], [38.4, 1706.0], [38.5, 1706.0], [38.6, 1706.0], [38.7, 1706.0], [38.8, 1706.0], [38.9, 1706.0], [39.0, 1750.0], [39.1, 1750.0], [39.2, 1750.0], [39.3, 1750.0], [39.4, 1750.0], [39.5, 1750.0], [39.6, 1750.0], [39.7, 1750.0], [39.8, 1750.0], [39.9, 1750.0], [40.0, 1759.0], [40.1, 1759.0], [40.2, 1759.0], [40.3, 1759.0], [40.4, 1759.0], [40.5, 1759.0], [40.6, 1759.0], [40.7, 1759.0], [40.8, 1759.0], [40.9, 1759.0], [41.0, 1775.0], [41.1, 1775.0], [41.2, 1775.0], [41.3, 1775.0], [41.4, 1775.0], [41.5, 1775.0], [41.6, 1775.0], [41.7, 1775.0], [41.8, 1775.0], [41.9, 1775.0], [42.0, 1809.0], [42.1, 1809.0], [42.2, 1809.0], [42.3, 1809.0], [42.4, 1809.0], [42.5, 1809.0], [42.6, 1809.0], [42.7, 1809.0], [42.8, 1809.0], [42.9, 1809.0], [43.0, 1830.0], [43.1, 1830.0], [43.2, 1830.0], [43.3, 1830.0], [43.4, 1830.0], [43.5, 1830.0], [43.6, 1830.0], [43.7, 1830.0], [43.8, 1830.0], [43.9, 1830.0], [44.0, 1832.0], [44.1, 1832.0], [44.2, 1832.0], [44.3, 1832.0], [44.4, 1832.0], [44.5, 1832.0], [44.6, 1832.0], [44.7, 1832.0], [44.8, 1832.0], [44.9, 1832.0], [45.0, 1836.0], [45.1, 1836.0], [45.2, 1836.0], [45.3, 1836.0], [45.4, 1836.0], [45.5, 1836.0], [45.6, 1836.0], [45.7, 1836.0], [45.8, 1836.0], [45.9, 1836.0], [46.0, 1837.0], [46.1, 1837.0], [46.2, 1837.0], [46.3, 1837.0], [46.4, 1837.0], [46.5, 1837.0], [46.6, 1837.0], [46.7, 1837.0], [46.8, 1837.0], [46.9, 1837.0], [47.0, 1858.0], [47.1, 1858.0], [47.2, 1858.0], [47.3, 1858.0], [47.4, 1858.0], [47.5, 1858.0], [47.6, 1858.0], [47.7, 1858.0], [47.8, 1858.0], [47.9, 1858.0], [48.0, 1864.0], [48.1, 1864.0], [48.2, 1864.0], [48.3, 1864.0], [48.4, 1864.0], [48.5, 1864.0], [48.6, 1864.0], [48.7, 1864.0], [48.8, 1864.0], [48.9, 1864.0], [49.0, 1865.0], [49.1, 1865.0], [49.2, 1865.0], [49.3, 1865.0], [49.4, 1865.0], [49.5, 1865.0], [49.6, 1865.0], [49.7, 1865.0], [49.8, 1865.0], [49.9, 1865.0], [50.0, 2077.0], [50.1, 2077.0], [50.2, 2077.0], [50.3, 2077.0], [50.4, 2077.0], [50.5, 2077.0], [50.6, 2077.0], [50.7, 2077.0], [50.8, 2077.0], [50.9, 2077.0], [51.0, 2161.0], [51.1, 2161.0], [51.2, 2161.0], [51.3, 2161.0], [51.4, 2161.0], [51.5, 2161.0], [51.6, 2161.0], [51.7, 2161.0], [51.8, 2161.0], [51.9, 2161.0], [52.0, 2212.0], [52.1, 2212.0], [52.2, 2212.0], [52.3, 2212.0], [52.4, 2212.0], [52.5, 2212.0], [52.6, 2212.0], [52.7, 2212.0], [52.8, 2212.0], [52.9, 2212.0], [53.0, 2405.0], [53.1, 2405.0], [53.2, 2405.0], [53.3, 2405.0], [53.4, 2405.0], [53.5, 2405.0], [53.6, 2405.0], [53.7, 2405.0], [53.8, 2405.0], [53.9, 2405.0], [54.0, 2407.0], [54.1, 2407.0], [54.2, 2407.0], [54.3, 2407.0], [54.4, 2407.0], [54.5, 2407.0], [54.6, 2407.0], [54.7, 2407.0], [54.8, 2407.0], [54.9, 2407.0], [55.0, 2628.0], [55.1, 2628.0], [55.2, 2628.0], [55.3, 2628.0], [55.4, 2628.0], [55.5, 2628.0], [55.6, 2628.0], [55.7, 2628.0], [55.8, 2628.0], [55.9, 2628.0], [56.0, 2799.0], [56.1, 2799.0], [56.2, 2799.0], [56.3, 2799.0], [56.4, 2799.0], [56.5, 2799.0], [56.6, 2799.0], [56.7, 2799.0], [56.8, 2799.0], [56.9, 2799.0], [57.0, 2862.0], [57.1, 2862.0], [57.2, 2862.0], [57.3, 2862.0], [57.4, 2862.0], [57.5, 2862.0], [57.6, 2862.0], [57.7, 2862.0], [57.8, 2862.0], [57.9, 2862.0], [58.0, 2963.0], [58.1, 2963.0], [58.2, 2963.0], [58.3, 2963.0], [58.4, 2963.0], [58.5, 2963.0], [58.6, 2963.0], [58.7, 2963.0], [58.8, 2963.0], [58.9, 2963.0], [59.0, 2999.0], [59.1, 2999.0], [59.2, 2999.0], [59.3, 2999.0], [59.4, 2999.0], [59.5, 2999.0], [59.6, 2999.0], [59.7, 2999.0], [59.8, 2999.0], [59.9, 2999.0], [60.0, 3030.0], [60.1, 3030.0], [60.2, 3030.0], [60.3, 3030.0], [60.4, 3030.0], [60.5, 3030.0], [60.6, 3030.0], [60.7, 3030.0], [60.8, 3030.0], [60.9, 3030.0], [61.0, 3046.0], [61.1, 3046.0], [61.2, 3046.0], [61.3, 3046.0], [61.4, 3046.0], [61.5, 3046.0], [61.6, 3046.0], [61.7, 3046.0], [61.8, 3046.0], [61.9, 3046.0], [62.0, 3063.0], [62.1, 3063.0], [62.2, 3063.0], [62.3, 3063.0], [62.4, 3063.0], [62.5, 3063.0], [62.6, 3063.0], [62.7, 3063.0], [62.8, 3063.0], [62.9, 3063.0], [63.0, 3195.0], [63.1, 3195.0], [63.2, 3195.0], [63.3, 3195.0], [63.4, 3195.0], [63.5, 3195.0], [63.6, 3195.0], [63.7, 3195.0], [63.8, 3195.0], [63.9, 3195.0], [64.0, 3214.0], [64.1, 3214.0], [64.2, 3214.0], [64.3, 3214.0], [64.4, 3214.0], [64.5, 3214.0], [64.6, 3214.0], [64.7, 3214.0], [64.8, 3214.0], [64.9, 3214.0], [65.0, 3222.0], [65.1, 3222.0], [65.2, 3222.0], [65.3, 3222.0], [65.4, 3222.0], [65.5, 3222.0], [65.6, 3222.0], [65.7, 3222.0], [65.8, 3222.0], [65.9, 3222.0], [66.0, 3412.0], [66.1, 3412.0], [66.2, 3412.0], [66.3, 3412.0], [66.4, 3412.0], [66.5, 3412.0], [66.6, 3412.0], [66.7, 3412.0], [66.8, 3412.0], [66.9, 3412.0], [67.0, 3550.0], [67.1, 3550.0], [67.2, 3550.0], [67.3, 3550.0], [67.4, 3550.0], [67.5, 3550.0], [67.6, 3550.0], [67.7, 3550.0], [67.8, 3550.0], [67.9, 3550.0], [68.0, 3558.0], [68.1, 3558.0], [68.2, 3558.0], [68.3, 3558.0], [68.4, 3558.0], [68.5, 3558.0], [68.6, 3558.0], [68.7, 3558.0], [68.8, 3558.0], [68.9, 3558.0], [69.0, 3616.0], [69.1, 3616.0], [69.2, 3616.0], [69.3, 3616.0], [69.4, 3616.0], [69.5, 3616.0], [69.6, 3616.0], [69.7, 3616.0], [69.8, 3616.0], [69.9, 3616.0], [70.0, 3694.0], [70.1, 3694.0], [70.2, 3694.0], [70.3, 3694.0], [70.4, 3694.0], [70.5, 3694.0], [70.6, 3694.0], [70.7, 3694.0], [70.8, 3694.0], [70.9, 3694.0], [71.0, 3701.0], [71.1, 3701.0], [71.2, 3701.0], [71.3, 3701.0], [71.4, 3701.0], [71.5, 3701.0], [71.6, 3701.0], [71.7, 3701.0], [71.8, 3701.0], [71.9, 3701.0], [72.0, 3704.0], [72.1, 3704.0], [72.2, 3704.0], [72.3, 3704.0], [72.4, 3704.0], [72.5, 3704.0], [72.6, 3704.0], [72.7, 3704.0], [72.8, 3704.0], [72.9, 3704.0], [73.0, 3747.0], [73.1, 3747.0], [73.2, 3747.0], [73.3, 3747.0], [73.4, 3747.0], [73.5, 3747.0], [73.6, 3747.0], [73.7, 3747.0], [73.8, 3747.0], [73.9, 3747.0], [74.0, 3878.0], [74.1, 3878.0], [74.2, 3878.0], [74.3, 3878.0], [74.4, 3878.0], [74.5, 3878.0], [74.6, 3878.0], [74.7, 3878.0], [74.8, 3878.0], [74.9, 3878.0], [75.0, 4074.0], [75.1, 4074.0], [75.2, 4074.0], [75.3, 4074.0], [75.4, 4074.0], [75.5, 4074.0], [75.6, 4074.0], [75.7, 4074.0], [75.8, 4074.0], [75.9, 4074.0], [76.0, 4112.0], [76.1, 4112.0], [76.2, 4112.0], [76.3, 4112.0], [76.4, 4112.0], [76.5, 4112.0], [76.6, 4112.0], [76.7, 4112.0], [76.8, 4112.0], [76.9, 4112.0], [77.0, 4191.0], [77.1, 4191.0], [77.2, 4191.0], [77.3, 4191.0], [77.4, 4191.0], [77.5, 4191.0], [77.6, 4191.0], [77.7, 4191.0], [77.8, 4191.0], [77.9, 4191.0], [78.0, 4232.0], [78.1, 4232.0], [78.2, 4232.0], [78.3, 4232.0], [78.4, 4232.0], [78.5, 4232.0], [78.6, 4232.0], [78.7, 4232.0], [78.8, 4232.0], [78.9, 4232.0], [79.0, 4317.0], [79.1, 4317.0], [79.2, 4317.0], [79.3, 4317.0], [79.4, 4317.0], [79.5, 4317.0], [79.6, 4317.0], [79.7, 4317.0], [79.8, 4317.0], [79.9, 4317.0], [80.0, 4439.0], [80.1, 4439.0], [80.2, 4439.0], [80.3, 4439.0], [80.4, 4439.0], [80.5, 4439.0], [80.6, 4439.0], [80.7, 4439.0], [80.8, 4439.0], [80.9, 4439.0], [81.0, 4462.0], [81.1, 4462.0], [81.2, 4462.0], [81.3, 4462.0], [81.4, 4462.0], [81.5, 4462.0], [81.6, 4462.0], [81.7, 4462.0], [81.8, 4462.0], [81.9, 4462.0], [82.0, 4512.0], [82.1, 4512.0], [82.2, 4512.0], [82.3, 4512.0], [82.4, 4512.0], [82.5, 4512.0], [82.6, 4512.0], [82.7, 4512.0], [82.8, 4512.0], [82.9, 4512.0], [83.0, 4547.0], [83.1, 4547.0], [83.2, 4547.0], [83.3, 4547.0], [83.4, 4547.0], [83.5, 4547.0], [83.6, 4547.0], [83.7, 4547.0], [83.8, 4547.0], [83.9, 4547.0], [84.0, 4575.0], [84.1, 4575.0], [84.2, 4575.0], [84.3, 4575.0], [84.4, 4575.0], [84.5, 4575.0], [84.6, 4575.0], [84.7, 4575.0], [84.8, 4575.0], [84.9, 4575.0], [85.0, 4580.0], [85.1, 4580.0], [85.2, 4580.0], [85.3, 4580.0], [85.4, 4580.0], [85.5, 4580.0], [85.6, 4580.0], [85.7, 4580.0], [85.8, 4580.0], [85.9, 4580.0], [86.0, 4623.0], [86.1, 4623.0], [86.2, 4623.0], [86.3, 4623.0], [86.4, 4623.0], [86.5, 4623.0], [86.6, 4623.0], [86.7, 4623.0], [86.8, 4623.0], [86.9, 4623.0], [87.0, 4677.0], [87.1, 4677.0], [87.2, 4677.0], [87.3, 4677.0], [87.4, 4677.0], [87.5, 4677.0], [87.6, 4677.0], [87.7, 4677.0], [87.8, 4677.0], [87.9, 4677.0], [88.0, 4792.0], [88.1, 4792.0], [88.2, 4792.0], [88.3, 4792.0], [88.4, 4792.0], [88.5, 4792.0], [88.6, 4792.0], [88.7, 4792.0], [88.8, 4792.0], [88.9, 4792.0], [89.0, 4850.0], [89.1, 4850.0], [89.2, 4850.0], [89.3, 4850.0], [89.4, 4850.0], [89.5, 4850.0], [89.6, 4850.0], [89.7, 4850.0], [89.8, 4850.0], [89.9, 4850.0], [90.0, 4904.0], [90.1, 4904.0], [90.2, 4904.0], [90.3, 4904.0], [90.4, 4904.0], [90.5, 4904.0], [90.6, 4904.0], [90.7, 4904.0], [90.8, 4904.0], [90.9, 4904.0], [91.0, 4957.0], [91.1, 4957.0], [91.2, 4957.0], [91.3, 4957.0], [91.4, 4957.0], [91.5, 4957.0], [91.6, 4957.0], [91.7, 4957.0], [91.8, 4957.0], [91.9, 4957.0], [92.0, 5094.0], [92.1, 5094.0], [92.2, 5094.0], [92.3, 5094.0], [92.4, 5094.0], [92.5, 5094.0], [92.6, 5094.0], [92.7, 5094.0], [92.8, 5094.0], [92.9, 5094.0], [93.0, 5192.0], [93.1, 5192.0], [93.2, 5192.0], [93.3, 5192.0], [93.4, 5192.0], [93.5, 5192.0], [93.6, 5192.0], [93.7, 5192.0], [93.8, 5192.0], [93.9, 5192.0], [94.0, 5201.0], [94.1, 5201.0], [94.2, 5201.0], [94.3, 5201.0], [94.4, 5201.0], [94.5, 5201.0], [94.6, 5201.0], [94.7, 5201.0], [94.8, 5201.0], [94.9, 5201.0], [95.0, 5257.0], [95.1, 5257.0], [95.2, 5257.0], [95.3, 5257.0], [95.4, 5257.0], [95.5, 5257.0], [95.6, 5257.0], [95.7, 5257.0], [95.8, 5257.0], [95.9, 5257.0], [96.0, 5312.0], [96.1, 5312.0], [96.2, 5312.0], [96.3, 5312.0], [96.4, 5312.0], [96.5, 5312.0], [96.6, 5312.0], [96.7, 5312.0], [96.8, 5312.0], [96.9, 5312.0], [97.0, 5471.0], [97.1, 5471.0], [97.2, 5471.0], [97.3, 5471.0], [97.4, 5471.0], [97.5, 5471.0], [97.6, 5471.0], [97.7, 5471.0], [97.8, 5471.0], [97.9, 5471.0], [98.0, 5539.0], [98.1, 5539.0], [98.2, 5539.0], [98.3, 5539.0], [98.4, 5539.0], [98.5, 5539.0], [98.6, 5539.0], [98.7, 5539.0], [98.8, 5539.0], [98.9, 5539.0], [99.0, 5768.0], [99.1, 5768.0], [99.2, 5768.0], [99.3, 5768.0], [99.4, 5768.0], [99.5, 5768.0], [99.6, 5768.0], [99.7, 5768.0], [99.8, 5768.0], [99.9, 5768.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 39.0, "series": [{"data": [[600.0, 39.0], [2400.0, 2.0], [2500.0, 1.0], [2600.0, 6.0], [700.0, 11.0], [2700.0, 1.0], [2800.0, 1.0], [2900.0, 2.0], [3200.0, 2.0], [3500.0, 5.0], [3600.0, 2.0], [3700.0, 4.0], [3900.0, 1.0], [4100.0, 4.0], [4200.0, 1.0], [4400.0, 2.0], [4500.0, 4.0], [4600.0, 1.0], [1600.0, 1.0], [1700.0, 5.0], [1800.0, 3.0], [1900.0, 1.0], [2000.0, 1.0]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[1100.0, 14.0], [300.0, 9.0], [600.0, 10.0], [1200.0, 2.0], [700.0, 9.0], [400.0, 11.0], [800.0, 12.0], [200.0, 2.0], [900.0, 8.0], [500.0, 10.0], [1000.0, 13.0]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[900.0, 1.0], [1000.0, 7.0], [1100.0, 5.0], [1200.0, 5.0], [1300.0, 5.0], [1400.0, 8.0], [1500.0, 1.0], [1600.0, 6.0], [1700.0, 4.0], [1800.0, 8.0], [2000.0, 1.0], [2100.0, 1.0], [2200.0, 1.0], [2400.0, 2.0], [2600.0, 1.0], [2800.0, 1.0], [2700.0, 1.0], [2900.0, 2.0], [3000.0, 3.0], [3100.0, 1.0], [3200.0, 2.0], [3400.0, 1.0], [3500.0, 2.0], [3700.0, 3.0], [3600.0, 2.0], [3800.0, 1.0], [4000.0, 1.0], [4100.0, 2.0], [4300.0, 1.0], [4200.0, 1.0], [4500.0, 4.0], [4600.0, 2.0], [4400.0, 2.0], [4700.0, 1.0], [4800.0, 1.0], [4900.0, 2.0], [5100.0, 1.0], [5000.0, 1.0], [5200.0, 2.0], [5300.0, 1.0], [5400.0, 1.0], [5500.0, 1.0], [5700.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 5700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 22.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 100.0, "series": [{"data": [[0.0, 22.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 78.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 100.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 100.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 52.36000000000001, "minX": 1.70282034E12, "maxY": 52.36000000000001, "series": [{"data": [[1.70282034E12, 52.36000000000001]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70282034E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 262.0, "minX": 1.0, "maxY": 5768.0, "series": [{"data": [[2.0, 4583.0], [3.0, 4586.0], [4.0, 4586.0], [5.0, 4536.0], [6.0, 4495.0], [7.0, 4499.0], [8.0, 4199.0], [9.0, 4210.0], [10.0, 4142.0], [11.0, 4119.0], [12.0, 4144.0], [13.0, 3997.0], [14.0, 3759.0], [15.0, 3754.0], [16.0, 3704.0], [17.0, 3703.0], [18.0, 3667.0], [19.0, 3658.0], [20.0, 3581.0], [21.0, 3566.0], [22.0, 3590.0], [23.0, 3596.0], [24.0, 3511.0], [25.0, 3270.0], [26.0, 3260.0], [27.0, 2941.0], [28.0, 2922.0], [29.0, 2858.0], [30.0, 2716.0], [31.0, 2697.0], [33.0, 2609.0], [32.0, 2621.0], [35.0, 2656.0], [37.0, 2542.0], [36.0, 2661.0], [39.0, 2434.0], [38.0, 2485.0], [41.0, 1898.0], [40.0, 2043.0], [43.0, 1911.0], [42.0, 1838.0], [45.0, 1778.0], [44.0, 1881.0], [47.0, 1736.0], [46.0, 1731.0], [49.0, 1768.0], [48.0, 1772.0], [51.0, 713.0], [50.0, 1637.0], [52.0, 630.0], [55.0, 708.0], [54.0, 671.0], [57.0, 639.0], [58.0, 668.0], [67.0, 706.0], [68.0, 662.8888888888889], [75.0, 673.0], [74.0, 663.1666666666667], [77.0, 670.0], [76.0, 702.0], [91.0, 641.4166666666666], [89.0, 643.0], [88.0, 686.0], [100.0, 663.8888888888889], [1.0, 4650.0]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[52.35, 1912.2099999999996]], "isOverall": false, "label": "HTTP Request-1-Aggregated", "isController": false}, {"data": [[2.0, 1185.0], [3.0, 671.0], [4.0, 262.0], [5.0, 935.0], [6.0, 462.0], [7.0, 813.0], [8.0, 376.0], [9.0, 302.0], [10.0, 952.0], [11.0, 1073.0], [12.0, 1056.0], [13.0, 794.0], [14.0, 1145.0], [15.0, 477.0], [16.0, 843.0], [17.0, 759.0], [18.0, 649.0], [19.0, 531.0], [20.0, 1041.0], [21.0, 872.0], [22.0, 1087.0], [23.0, 982.0], [24.0, 601.0], [25.0, 477.0], [26.0, 617.0], [27.0, 751.0], [28.0, 1150.0], [29.0, 364.0], [30.0, 900.0], [31.0, 714.0], [33.0, 1092.0], [32.0, 377.0], [35.0, 802.5], [37.0, 503.0], [36.0, 897.0], [39.0, 1115.0], [38.0, 312.0], [41.0, 963.0], [40.0, 1151.0], [43.0, 1150.0], [42.0, 1192.0], [45.0, 626.0], [44.0, 331.0], [47.0, 425.0], [46.0, 1232.0], [49.0, 859.0], [48.0, 305.0], [51.0, 1150.0], [50.0, 769.0], [52.0, 786.0], [55.0, 521.0], [54.0, 902.5], [57.0, 1191.0], [58.0, 1022.0], [67.0, 671.0], [68.0, 739.111111111111], [75.0, 634.0], [74.0, 708.3333333333333], [77.0, 1162.0], [76.0, 1071.0], [91.0, 784.5], [89.0, 433.0], [88.0, 641.0], [100.0, 697.5555555555557], [1.0, 889.0]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[52.35, 773.3699999999999]], "isOverall": false, "label": "HTTP Request-0-Aggregated", "isController": false}, {"data": [[2.0, 5768.0], [3.0, 5257.0], [4.0, 4850.0], [5.0, 5471.0], [6.0, 4957.0], [7.0, 5312.0], [8.0, 4575.0], [9.0, 4512.0], [10.0, 5094.0], [11.0, 5192.0], [12.0, 5201.0], [13.0, 4792.0], [14.0, 4904.0], [15.0, 4232.0], [16.0, 4547.0], [17.0, 4462.0], [18.0, 4317.0], [19.0, 4191.0], [20.0, 4623.0], [21.0, 4439.0], [22.0, 4677.0], [23.0, 4580.0], [24.0, 4112.0], [25.0, 3747.0], [26.0, 3878.0], [27.0, 3694.0], [28.0, 4074.0], [29.0, 3222.0], [30.0, 3616.0], [31.0, 3412.0], [33.0, 3701.0], [32.0, 2999.0], [35.0, 3459.0], [37.0, 3046.0], [36.0, 3558.0], [39.0, 3550.0], [38.0, 2799.0], [41.0, 2862.0], [40.0, 3195.0], [43.0, 3063.0], [42.0, 3030.0], [45.0, 2405.0], [44.0, 2212.0], [47.0, 2161.0], [46.0, 2963.0], [49.0, 2628.0], [48.0, 2077.0], [51.0, 1865.0], [50.0, 2407.0], [52.0, 1417.0], [55.0, 1231.0], [54.0, 1575.0], [57.0, 1830.0], [58.0, 1690.5], [67.0, 1379.0], [68.0, 1402.6666666666667], [75.0, 1307.0], [74.0, 1372.1666666666665], [77.0, 1832.0], [76.0, 1775.0], [91.0, 1426.3333333333335], [89.0, 1077.0], [88.0, 1328.0], [100.0, 1362.4444444444443], [1.0, 5539.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[52.35, 2686.2800000000007]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 766.6666666666666, "minX": 1.70282034E12, "maxY": 305172.1666666667, "series": [{"data": [[1.70282034E12, 305172.1666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.70282034E12, 766.6666666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70282034E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 773.3699999999999, "minX": 1.70282034E12, "maxY": 2686.2800000000007, "series": [{"data": [[1.70282034E12, 1912.2099999999996]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[1.70282034E12, 773.3699999999999]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[1.70282034E12, 2686.2800000000007]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70282034E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 772.7699999999999, "minX": 1.70282034E12, "maxY": 1663.18, "series": [{"data": [[1.70282034E12, 1663.18]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[1.70282034E12, 772.7699999999999]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[1.70282034E12, 772.7699999999999]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70282034E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 570.8799999999998, "minX": 1.70282034E12, "maxY": 680.4600000000002, "series": [{"data": [[1.70282034E12, 570.8799999999998]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[1.70282034E12, 680.4600000000002]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[1.70282034E12, 680.46]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70282034E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 248.0, "minX": 1.70282034E12, "maxY": 5768.0, "series": [{"data": [[1.70282034E12, 5768.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.70282034E12, 4572.2]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.70282034E12, 5538.320000000001]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.70282034E12, 4901.299999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.70282034E12, 248.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.70282034E12, 1434.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70282034E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 790.0, "minX": 16.0, "maxY": 4618.0, "series": [{"data": [[16.0, 4618.0], [36.0, 4130.5], [22.0, 2060.0], [100.0, 790.0], [26.0, 2931.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[100.0, 820.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 100.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 666.5, "minX": 16.0, "maxY": 2447.5, "series": [{"data": [[16.0, 2447.5], [36.0, 1959.5], [22.0, 1199.0], [100.0, 790.0], [26.0, 1548.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[100.0, 666.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 100.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.70282034E12, "maxY": 5.0, "series": [{"data": [[1.70282034E12, 5.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70282034E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.6666666666666667, "minX": 1.70282034E12, "maxY": 1.6666666666666667, "series": [{"data": [[1.70282034E12, 1.6666666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.70282034E12, 1.6666666666666667]], "isOverall": false, "label": "301", "isController": false}, {"data": [[1.70282034E12, 1.6666666666666667]], "isOverall": false, "label": "503", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70282034E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.8333333333333334, "minX": 1.70282034E12, "maxY": 1.6666666666666667, "series": [{"data": [[1.70282034E12, 0.8333333333333334]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}, {"data": [[1.70282034E12, 0.8333333333333334]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.70282034E12, 1.6666666666666667]], "isOverall": false, "label": "HTTP Request-0-success", "isController": false}, {"data": [[1.70282034E12, 0.8333333333333334]], "isOverall": false, "label": "HTTP Request-1-failure", "isController": false}, {"data": [[1.70282034E12, 0.8333333333333334]], "isOverall": false, "label": "HTTP Request-1-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70282034E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.6666666666666667, "minX": 1.70282034E12, "maxY": 3.3333333333333335, "series": [{"data": [[1.70282034E12, 3.3333333333333335]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.70282034E12, 1.6666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70282034E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

